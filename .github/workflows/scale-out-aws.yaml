name: scale-out-aws
on:
  repository_dispatch:
    types: 
      - scale-out-aws

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: output webhook source
      run: |
        echo "The webhook payload contents are ${{ github.event.client_payload }}"
        echo "The source of the webhook is = ${{ github.event.client_payload.webhookSource }}"
 
    - name: parse client payload data for scaling
      id: client_payload_data
      run: |
        echo ::set-output name=asg_name::${{ github.event.client_payload.scaleName }}
        echo ::set-output name=region::${{ github.event.client_payload.rgGrpRgn }}
 
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ steps.client_payload_data.outputs.region }}

    - name: query aws
      run: |
        aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name ${{ steps.client_payload_data.outputs.asg_name }} > autoscale-output.txt
 
    - name: read autoscale output
      run: cat autoscale-output.txt

    - name: set autoscale variables
      id: autoscale
      run: |
        echo ::set-output name=max_size::$(cat ./autoscale-output.txt | jq '.AutoScalingGroups[0].MaxSize')
        echo ::set-output name=min_size::$(cat ./autoscale-output.txt | jq '.AutoScalingGroups[0].MinSize')
        echo ::set-output name=desired_capacity::$(cat ./autoscale-output.txt | jq '.AutoScalingGroups[0].DesiredCapacity')

    - name: check if can be scaled
      id: check
      run: |
        echo ::set-output name=wanted_capacity::$(expr ${{ steps.autoscale.outputs.desired_capacity }} + 1)
        echo ::set-output name=difference::$(expr ${{ steps.autoscale.outputs.max_size }} - ${{ steps.autoscale.outputs.desired_capacity }})

    - name: output difference
      run: echo "The difference between desired and capacity = ${{ steps.check.outputs.difference }}"

    - name: scale up if not at max
      id: check_scale
      if: steps.check.outputs.difference > 0 
      run: |
       echo "The difference between desired and capacity = ${{ steps.check.outputs.difference }}"
       echo ::set-output name=new_size::$(cat ./autoscale-output.txt | jq '.AutoScalingGroups[0].DesiredCapacity' | xargs -I {} expr {} + 1)
       echo ::set-output name=scale-out::'true'

    - name: scale up
      if: ${{ steps.check_scale.outputs.scale-out == 'true' }}
      run: |
        echo "This is the new size ${{ steps.check_scale.outputs.new_size }}"
        aws autoscaling set-desired-capacity --auto-scaling-group-name ${{ github.event.client_payload.scaleName }} --desired-capacity ${{ steps.check_scale.outputs.new_size }}

    - name: can't scale
      if: ${{ steps.check_scale.outputs.scale-out != 'true' }}
      run: echo "Sorry, can't scale out because the new desired capacity of ${{ steps.check.outputs.wanted_capacity }} is greater than the maximum size of ${{ steps.autoscale.outputs.max_size }}"